// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package updateissue

import (
	"tektoncd.dev/experimental/pkg/cligithub"
	"tektoncd.dev/experimental/pkg/clik8s"
	"tektoncd.dev/experimental/pkg/deprecated/status"
	"tektoncd.dev/experimental/pkg/scm/issue"
	"tektoncd.dev/experimental/pkg/scm/issue/markdown"
	"tektoncd.dev/experimental/pkg/wirecli/wiregit"
	"tektoncd.dev/experimental/pkg/wirecli/wiregithub"
	"tektoncd.dev/experimental/pkg/wirecli/wirek8s"
)

// Injectors from wire.go:

func InitializeUpdater(resourceConfigPath clik8s.ResourceConfigPath) (*issue.Updater, error) {
	gitOwnerRepo := wiregithub.NewGitRepoFlag()
	gitOwner, err := wiregithub.NewGitOwner(gitOwnerRepo)
	if err != nil {
		return nil, err
	}
	gitRepo, err := wiregithub.NewGitRepo(gitOwnerRepo)
	if err != nil {
		return nil, err
	}
	name := wiregithub.NewNameFlag()
	labels := issue.NewLabelsFlag()
	repository, err := wiregit.NewRequiredRepository(resourceConfigPath)
	if err != nil {
		return nil, err
	}
	commitIter, err := wiregit.NewRequiredCommitIter(repository)
	if err != nil {
		return nil, err
	}
	commit, err := wiregit.NewRequiredCommit(commitIter)
	if err != nil {
		return nil, err
	}
	gitHubTokenPath := wiregithub.NewGitHubTokenPath()
	gitHubToken, err := wiregithub.NewGitHubToken(gitHubTokenPath)
	if err != nil {
		return nil, err
	}
	client := wiregithub.NewGitHubClient(gitHubToken)
	config, err := wirek8s.NewRestConfig()
	if err != nil {
		return nil, err
	}
	clientset, err := wirek8s.NewKubernetesClientSet(config)
	if err != nil {
		return nil, err
	}
	provider := &status.Provider{
		Client: clientset,
	}
	lister := &status.Lister{
		Provider: provider,
	}
	fileSystem := wirek8s.NewFileSystem()
	resourceConfigs, err := wirek8s.NewResourceConfig(resourceConfigPath, fileSystem)
	if err != nil {
		return nil, err
	}
	issueClient := &cligithub.IssueClient{
		Client: client,
		Repo:   gitRepo,
		Owner:  gitOwner,
		Name:   name,
	}
	markdowner := markdown.Markdowner{
		Path: resourceConfigPath,
		Name: name,
	}
	updater := &issue.Updater{
		Owner:       gitOwner,
		Repo:        gitRepo,
		Name:        name,
		Labels:      labels,
		Commit:      commit,
		GHClient:    client,
		Lister:      lister,
		Resources:   resourceConfigs,
		IssueClient: issueClient,
		Markdowner:  markdowner,
	}
	return updater, nil
}
